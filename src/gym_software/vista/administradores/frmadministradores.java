/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gym_software.vista.administradores;
import gym_software.db.Conexion;
import gym_software.vista.frmdashboard;
import java.sql.*;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import org.mariadb.jdbc.Connection;
/**
 *
 * @author pc
 */
public class frmadministradores extends javax.swing.JFrame {
    private Integer isSuperAdmin = 0;

    /**
     * Creates new form frmadministradores
     */
    public frmadministradores(Integer isAdmin) {
        
        initComponents();
        this.isSuperAdmin = isAdmin;
        System.out.println("Entra a frmadministradores");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ejecutarLLamadoPrincipal();
            }});
        
        
    }
    // Método para obtener el modelo de la tabla
    public DefaultTableModel getTableModel() {
        return (DefaultTableModel) tbadmins.getModel();
    }
    
    public DefaultTableModel getTablaModel() {
    return (DefaultTableModel) tbadmins.getModel();
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbadmins = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        btnNewAdmin = new javax.swing.JButton();
        btncChangePassword = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        tbadmins.setBackground(new java.awt.Color(255, 0, 204));
        tbadmins.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tbadmins.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre", "Cargo"
            }
        ));
        jScrollPane1.setViewportView(tbadmins);
        if (tbadmins.getColumnModel().getColumnCount() > 0) {
            tbadmins.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 204));
        jLabel1.setText("ADMINISTRADORES REGISTRADOS");

        btnDelete.setBackground(new java.awt.Color(255, 0, 204));
        btnDelete.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        btnDelete.setText("Activar/Inactivar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jToggleButton1.setBackground(new java.awt.Color(255, 0, 204));
        jToggleButton1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jToggleButton1.setText("Volver");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 0, 255));
        jButton1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnNewAdmin.setBackground(new java.awt.Color(255, 0, 204));
        btnNewAdmin.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        btnNewAdmin.setText("Nuevo");
        btnNewAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAdminActionPerformed(evt);
            }
        });

        btncChangePassword.setBackground(new java.awt.Color(255, 0, 204));
        btncChangePassword.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        btncChangePassword.setText("Cambiar Contraseña");
        btncChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncChangePasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(94, 94, 94)
                            .addComponent(jLabel1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnNewAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btncChangePassword)))
                                    .addGap(0, 0, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(670, 670, 670)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNewAdmin)
                        .addGap(43, 43, 43)
                        .addComponent(btncChangePassword)
                        .addGap(47, 47, 47)
                        .addComponent(btnDelete)
                        .addGap(31, 31, 31)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToggleButton1)
                        .addGap(79, 79, 79))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btncChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncChangePasswordActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbadmins.getSelectedRow();

        if (selectedRow != -1) {
            // Obtener el valor de la columna "id" de la fila seleccionada
            Object id = tbadmins.getValueAt(selectedRow, 1); // Suponiendo que el ID está en la primera columna

            // Confirmar la eliminación con el usuario
            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea cambiar la contraseña del registro seleccionado?", "Confirmación", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Llamar al método para eliminar el registro de la base de datos
                frmadministradorcambiarpassword frm = new frmadministradorcambiarpassword(id, this.isSuperAdmin);
                frm.setVisible(true);
                this.dispose();

                // Eliminar la fila del JTable
                //((DefaultTableModel) tbadmins.getModel()).removeRow(selectedRow);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un registro para eliminar.");
        }
    }//GEN-LAST:event_btncChangePasswordActionPerformed

    private void btnNewAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAdminActionPerformed
        // TODO add your handling code here:
        frmnewadministrador newAdmin = new frmnewadministrador(this.isSuperAdmin);
        newAdmin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnNewAdminActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        frmadministradores frmadmin = new frmadministradores(this.isSuperAdmin);
        frmadmin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        frmdashboard principal = new frmdashboard(this.isSuperAdmin);
        principal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbadmins.getSelectedRow();

        if (selectedRow != -1) {
            // Obtener el valor de la columna "id" de la fila seleccionada
            Object id = tbadmins.getValueAt(selectedRow, 1); // Suponiendo que el ID está en la primera columna

            // Confirmar la eliminación con el usuario
            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea cambiar el estado del registro seleccionado?", "Confirmación", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Llamar al método para eliminar el registro de la base de datos
                eliminarRegistroDeBaseDatos(id);

                // Eliminar la fila del JTable
                //((DefaultTableModel) tbadmins.getModel()).removeRow(selectedRow);

                JOptionPane.showMessageDialog(this, "Registro cambiado de estado exitosamente.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un registro para eliminar.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    
    
    private void eliminarRegistroDeBaseDatos(Object id){
        String query = "UPDATE admins\n" +
            "SET estado = CASE WHEN estado = 'ACTIVE' THEN 'INACTIVE' ELSE (CASE WHEN estado = 'INACTIVE' THEN 'ACTIVE' END) END\n" +
            "WHERE id = '"+id+"';";
        System.out.println(query);
        try {
            Conexion conexion = new Conexion();
            conexion.ejecutarUpdate(query);
        }catch(SQLException e){
        }
    }
    
    private void ejecutarLLamadoPrincipal() {

                // Intentar cargar los datos después de que el formulario esté visible
                try {
                    Conexion conexion = new Conexion();
                    String getAllAdmins = """
                                        select id, nombre, estado, cargo
                                        FROM admins;
                                        """;
                    List<Map<String, Object>> usuarios = conexion.ejecutarConsultaVariosResultados(getAllAdmins);
                    cargarDatosEnTabla(usuarios);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error al obtener los datos de la base de datos.");
                    e.printStackTrace();
                }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmadministradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmadministradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmadministradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmadministradores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.out.println("Entra a main");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }});
        //java.awt.EventQueue.invokeLater(() -> {
            
        //});
        
    }
    
    public class EditableTableModel extends DefaultTableModel {
        public EditableTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return true; // Permite que todas las celdas sean editables
        }
    }
    
    public void cargarDatosEnTabla(List<Map<String, Object>> datos) {
        String[] columnNames = datos.get(0).keySet().toArray(new String[0]);
        Object[][] rowData = new Object[datos.size()][columnNames.length];

        // Llenar datos en el array para pasar al modelo
        for (int i = 0; i < datos.size(); i++) {
            Map<String, Object> row = datos.get(i);
            int j = 0;
            for (String column : columnNames) {
                rowData[i][j++] = row.get(column);
            }
        }

        // Crear el modelo editable y asignarlo al JTable
        EditableTableModel model = new EditableTableModel(rowData, columnNames);
        tbadmins.setModel(model);

        // Agregar un listener para detectar cambios
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                TableModel model = (TableModel) e.getSource();
                Object data = model.getValueAt(row, column);

                String columnName = model.getColumnName(column);
                Object id = model.getValueAt(row, 1); // Suponiendo que la columna "id" es la primera

                // Llamar a un método para actualizar la base de datos
                actualizarRegistro(id, columnName, data);
            }
        });
    }
    
    public void actualizarRegistro(Object id, String columnName, Object newValue) {
        String query = "UPDATE admins SET " + columnName + " = ? WHERE id = ?";
        try (Connection conn = (Connection) DriverManager.getConnection("jdbc:mariadb://localhost:3306/gym", "root", "");
            PreparedStatement statement = conn.prepareStatement(query)) {
           statement.setObject(1, newValue);
           statement.setObject(2, id);
           statement.executeUpdate();

           System.out.println("Registro actualizado exitosamente");
       } catch (SQLException e) {
           System.out.println("Error al actualizar el registro: " + e.getMessage());
       }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnDelete;
    private javax.swing.JButton btnNewAdmin;
    private javax.swing.JButton btncChangePassword;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable tbadmins;
    // End of variables declaration//GEN-END:variables
}
